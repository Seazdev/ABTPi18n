name: ABTPi18n CI/CD (Trading Bot Pro Enterprise)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/seazdev/abtpi18n-backend
  IMAGE_FRONTEND: ghcr.io/seazdev/abtpi18n-frontend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ env.IMAGE_BACKEND }}:latest

      - name: Build & push frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: ${{ env.IMAGE_FRONTEND }}:latest

      - name: Generate SBOM (Syft)
        uses: anchore/syft-action@v0.17.0
        with:
          image: ${{ env.IMAGE_BACKEND }}:latest
          format: spdx-json
          output: sbom.json

      - name: Security scan (Trivy)
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_BACKEND }}:latest
          format: table
          exit-code: '0'
          ignore-unfixed: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign container images (keyless)
        env:
          COSIGN_EXPERIMENTAL: ${{ secrets.COSIGN_EXPERIMENTAL }}
        run: |
          cosign sign --keyless ${{ env.IMAGE_BACKEND }}:latest
          cosign sign --keyless ${{ env.IMAGE_FRONTEND }}:latest

  deploy:
    needs: [ build-and-push ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install SSH client
        run: sudo apt-get install -y openssh-client

      - name: Deploy to production server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        run: |
          echo "${SSH_PRIVATE_KEY}" > ssh_key && chmod 600 ssh_key
          ssh -o StrictHostKeyChecking=no -i ssh_key ${DEPLOY_USER}@${DEPLOY_HOST} <<'EOF'
            cd /opt/tradingbot_pro
            docker compose pull
            docker compose up -d
            docker system prune -af
          EOF
